% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import-vdj.R
\name{import_vdj}
\alias{import_vdj}
\title{Import V(D)J data}
\usage{
import_vdj(
  input = NULL,
  vdj_dir = NULL,
  prefix = "",
  filter_chains = TRUE,
  filter_paired = FALSE,
  define_clonotypes = NULL,
  include_mutations = TRUE,
  aggr_dir = NULL,
  sep = ";"
)
}
\arguments{
\item{input}{Object containing single cell data, if set to NULL a data.frame
containing V(D)J results will be returned}

\item{vdj_dir}{Directory containing the output from cellranger vdj. A vector
or named vector can be given to load data from multiple runs. If a named
vector is given, the cell barcodes will be prefixed with the provided names.
This mimics the behavior of Seurat::Read10X().}

\item{prefix}{Prefix to add to new columns}

\item{filter_chains}{Only include chains with at least one productive and
full length contig.}

\item{filter_paired}{Only include clonotypes with paired chains. For TCR
data each clonotype must have at least one TRA and TRB chain, for BCR data
each clonotype must have at least one IGH chain and at least one IGK or IGL
chain.}

\item{define_clonotypes}{Define clonotype IDs based on V(D)J data. This is
useful if the V(D)J datasets being loaded do not have consistent clonotype
IDs, i.e., clonotype1 is not the same across samples. Possible values are:
\itemize{
\item cdr3aa, define clonotypes based on the CDR3 amino acid sequence
\item cdr3nt, define clonotypes based on the CDR3 nucleotide sequence
\item cdr3_gene, define clonotypes based on the combination of the CDR3
nucleotide sequence and the V(D)J genes.
}

When defining clonotypes, only productive full length chains will be used.
Set to NULL (default) to use the clonotype IDs already present in the input
data.}

\item{include_mutations}{Include information about the number of
insertions/deletions/mismatches for each chain. This requires the
concat_ref.bam file from cellranger vdj to be present the directory provided
to vdj_dir. If include_mutations is TRUE, filter_chains is also
automatically set TRUE since indel data is only available for productive
chains.}

\item{aggr_dir}{Path to cellranger aggr output. To include mutation
information for each chain, also provide paths to the original cellranger
vdj directories using the vdj_dir argument.

When using cellranger aggr results, cell barcode prefixes are automatically
generated by combining the 'donor' and 'origin' fields specified in the
cellranger aggr configuation file (i.e. 'donor_origin_'). To match
cellranger aggr output with mutation data found in the original
cellranger vdj output directories, be sure to provide matching cell barcode
prefixes to the cell_prefix argument.}

\item{sep}{Separator to use for storing per cell V(D)J data}
}
\value{
Single cell object or data.frame with added V(D)J data
}
\description{
Import V(D)J data
}
\examples{
# Loading multiple datasets

head(vdj_so@meta.data, 1)

# Specifying cell prefixes
# if cell prefixes are not specified when loading multiple datasets,
# prefixes will be automatically generated in a similar manner as
# Seurat::Read10X

head(vdj_so@meta.data, 1)

# Specifying cell prefixes using vector names
# if a named vector is passed, the names will be used as the cell prefixes

head(vdj_so@meta.data, 1)

# Only include V(D)J data for productive full length chains

head(vdj_so@meta.data, 1)

# Only include V(D)J data for cells with paired chains

head(vdj_so@meta.data, 1)

# Defining clonotypes
# this is useful if the original clonotype IDs are not consistent across
# datasets, i.e. clonotype1 is not the same for all samples

head(vdj_so@meta.data, 1)

# Omit indel information for each chain
# this information will be included if the file concat_ref.bam is present
# to speed up data import, omit indel information

head(vdj_so@meta.data, 1)

# Using import_vdj outside of Seurat
# SingleCellExperiment objects are also compatible, or if an input object is
# omitted, a data.frame containing the V(D)J data will be returned

}
